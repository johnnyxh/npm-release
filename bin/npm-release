#!/usr/bin/env node

var spawn = require('cross-spawn').spawn,
    exec = require('child_process').exec,
    url = require('url'),
    conventionalBump = require('conventional-recommended-bump'),
    path = require('path'),
    fs = require('fs'),
    argv = require('optimist').argv,
    colors = require('colors'),
    releasePath = path.resolve(__dirname, './git-release');

var exit = function (str) {
  console.log([].slice.call(arguments).join(' ').red);
  process.exit(-1);
};

var error = exit.bind(null, 'Error:');

var success = function () {
  console.log([].slice.call(arguments).join(' ').green);
};

var msg = function () {
  console.log([].slice.call(arguments).join(' ').blue);
};

var done = function () {
  success('Released new version ' + getCurrentVersion() + ' successfully.');
  process.exit(0);
};

var getPkg = function () {
  var pkg;
  try {
    pkg = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), './package.json')));
  } catch(e) {
    error('Could not open a package.json.');
  }
  return pkg;
};

var getCurrentVersion = function () {
  return getPkg().version;
};

var oldVersion = getCurrentVersion();

if (!oldVersion) error('No version in package.json found.');

conventionalBump({
    preset: 'angular'
}, function(err, result) {
    msg('Creating a ' + result.releaseType + ' release');

    // Run npm verison (tags & commits)
    msg('Updating version...');
    // %s is npm version variable: https://npmjs.org/doc/version.html
    var npm = spawn('npm', ['version', result.releaseType, '-m', "chore(release): Release v%s."]);
    npm.stdout.pipe(process.stdout);
    npm.stderr.pipe(process.stderr);

    npm.on('close', function (code) {
      if (code !== 0) return error('npm version. Exiting.');

      success('Version bumped from', oldVersion, 'to', getCurrentVersion());
      msg('Pushing...');

      // Add credentials if environment variables are present
      var repoUrl = getPkg().repository.url;
      if (process.env.GIT_USER && process.env.GIT_PASS) {
        var repoObj = url.parse(repoUrl);
        repoObj.auth = process.env.GIT_USER + ':' + process.env.GIT_PASS;
        repoUrl = url.format(repoObj);
      }
      // Run git-release (tag & push)
      var git = require('simple-git')();
      git.push([repoUrl])
        .then(() => { return git.pushTags([repoUrl]) })
        .then(() => {
          success('Pushed.');

          if (getPkg().private) {
            msg('Publish to npm cancelled, this is a private repo.');
            return done();
          }

          msg('Publishing to npm...');

          // Publish to npm
          var publish = spawn('npm', ['publish']);
          publish.stdout.pipe(process.stdout);
          publish.stderr.pipe(process.stderr);
          publish.on('close', function (code) {
            if (code !== 0) return error('npm publish. Exiting.');

            success('Published to npm.');
            done();

          });
        });
    });
});
